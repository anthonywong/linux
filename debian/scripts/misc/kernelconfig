#!/bin/bash

# Script to merge all configs and run 'make silentoldconfig' on it to wade out bad juju.
# Then split the configs into distro-commmon and flavour-specific parts

# We have to be in the top level kernel source directory
if [ ! -f MAINTAINERS ] || [ ! -f Makefile ]; then
	echo "This does not appear to be the kernel source directory." 1>&2
	exit 1
fi

mode=${1:?"Usage: $0 [oldconfig|editconfig]"}
case "$mode" in
    oldconfig)  ;; # All is good
    editconfig) ;; # All is good
    *) echo "$0 called with invalid mode" 1>&2
       exit 1 ;;
esac
kerneldir="`pwd`"
confdir="debian/config"
ports=$2
if [ "$ports" = "ports" ]; then
	archs=$(find $confdir -mindepth 1 -type d | cut -d'/' -f3)
else
	archs="amd64 armel i386 lpia"
fi
bindir="`pwd`/debian/scripts/misc"
common_conf="$confdir/config.common.ubuntu"
tmpdir=`mktemp -d`

test -d build || mkdir build

for arch in $archs; do
	# Map debian archs to kernel archs
	case "$arch" in
		amd64)	kernarch="x86_64"	;;
		armel)	kernarch="arm"	;;
		lpia)   kernarch="x86" ;;
		*)	kernarch="$arch"	;;
	esac

	echo ""
	echo "***************************************"
	echo "* Processing $arch ($kernarch) ... "
	archconfdir=$confdir/$arch
	flavourconfigs=$(cd $archconfdir && ls config.flavour.*)

	# Merge configs
	# We merge config.common.ubuntu + config.common.<arch> +
	# config.flavour.<flavour>
	if [ -f $common_conf ]; then
		for config in $flavourconfigs; do
			case $config in
			    *)
			    cat $common_conf >> $archconfdir/$config
			    ;;
			esac
		done
	fi
	if [ -f $archconfdir/config.common.$arch ]; then
		for config in $flavourconfigs; do
			case $config in
			    *)
			    cat $archconfdir/config.common.$arch >> $archconfdir/$config
			    ;;
			esac
		done
	fi

	rm -f $archconfdir/config.common.$arch

	for config in $flavourconfigs; do
		if [ -f $archconfdir/$config ]; then
			cat $archconfdir/$config > build/.config
			# Call oldconfig or menuconfig
			case "$mode" in
			    oldconfig)
				# Weed out incorrect config parameters
				echo "* Run silentoldconfig on $arch/$config ..."
				make O=`pwd`/build ARCH=$kernarch silentoldconfig ;;
			    editconfig)
				# Interactively edit config parameters
				echo " * Run menuconfig on $arch/$config... Press a key."
				read
				make O=`pwd`/build ARCH=$kernarch menuconfig ;;
			    *)  # Bad!
				exit 1 ;;
			esac
			cat build/.config > $archconfdir/$config
		else
			echo "!! Config not found $archconfdir/$config..."
		fi
	done

	echo "Running splitconfig.pl for $arch"
	echo

	# Can we make this more robust by avoiding $tmpdir completely?
	# This approach was used for now because I didn't want to change
	# splitconfig.pl
	(cd $archconfdir; $bindir/splitconfig.pl; mv config.common \
	 config.common.$arch; cp config.common.$arch $tmpdir)
done

rm -f $common_conf

# Now run splitconfig.pl on all the config.common.<arch> copied to
# $tmpdir
(cd $tmpdir; $bindir/splitconfig.pl)
(
	cd $kerneldir/$confdir;
	grep -v 'is UNMERGABLE' <$tmpdir/config.common \
		>$kerneldir/$confdir/config.common.ubuntu
	for arch in $archs; do
		grep -v 'is UNMERGABLE' <$tmpdir/config.common.$arch \
			>$arch/config.common.$arch
	done
)
